plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
wgss<-rep(0,8)
for(i in 1:8){
wgss[i]<-kmeans(Mammals_Milk_Std[,6:10],centers=i,nstart=50)$tot.withinss
}
plot(c(1:8),wgss,type="b",pch=16,cex=1.3,ylim=c(0,100),xlab="Number of Groups",ylab="WGSS")
Mammals_Milk %>% summary()
library(tidyverse)
Mammals_Milk<-read.csv("Milk_Composition.csv",header=T,row.names=1)
head(Mammals_Milk)
Mammals_Milk %>% summary()
Mammals_Milk_Std<-as.data.frame(round(scale(Mammals_Milk),2))
head(Mammals_Milk_Std)
resultMatrix <- apply(Mammals_Milk, 2, function(x) (x - mean(x)) / sd(x))
Mammals_Milk_Std<-cbind(Mammals_Milk_Std,resultMatrix) #rename
library(ggdendro)
dist_max <- dist(Mammals_Milk_Std[,6:10],method='euclidean')
ggdendrogram(hclust(dist_max),sub="",cex.lab=1.25,hang=-1,frame.plot=T)
set.seed(125)
#k3
MMilk_km_3 <- kmeans(Mammals_Milk_Std[,6:10],centers=3,nstart = 100)
Mammals_Milk$km_3<-MMilk_km_3$cluster
arrange(Mammals_Milk, .by_group = TRUE)
#df$assignment_k3 <- kmeansout_k4$cluster
#k4
MMilk_km_4<- kmeans(Mammals_Milk_Std[,6:10],centers=4,nstart = 100)
Mammals_Milk$km_4<-MMilk_km_4$cluster
arrange(Mammals_Milk, .by_group = TRUE)
#df$assignment_k4 <- kmeansout_k4$cluster
#k3
MMilk_Agg_K3<-Mammals_Milk %>% group_by(km_3) %>% summarize(count=n(),Mean_Water=mean(Water),Mean_Protein=mean(Protein),Mean_Fat=mean(Fat),Mean_Lactose=mean(Lactose),Mean_Ash=mean(Ash))
round(scale(MMilk_Agg_K3),2)
#k4
MMilk_Agg_K4<-Mammals_Milk %>% group_by(km_4) %>% summarize(count=n(),Mean_Water=mean(Water),Mean_Protein=mean(Protein),Mean_Fat=mean(Fat),Mean_Lactose=mean(Lactose),Mean_Ash=mean(Ash))
round(scale(MMilk_Agg_K4),2)
#Mammals_Milk_Std<-cbind(Mammals_Milk_Std,resultMatrix)
#library(ggplot2)
#install.packages("cowplot")
#require(cowplot)
#library(cowplot)
graph1 <- boxplot(Mammals_Milk[,1]~MMilk_km_3$cluster, xlab="graph1",varwidth=T)+geom_boxplot()
graph2 <- boxplot(Mammals_Milk[,2]~MMilk_km_3$cluster, xlab="graph2",varwidth=T)+geom_boxplot()
graph3 <- boxplot(Mammals_Milk[,3]~MMilk_km_3$cluster, xlab="graph3",varwidth=T)+geom_boxplot()
graph4 <- boxplot(Mammals_Milk[,4]~MMilk_km_3$cluster, xlab="graph4",varwidth=T)+geom_boxplot()
graph5 <- boxplot(Mammals_Milk[,5]~MMilk_km_3$cluster, xlab="graph5",varwidth=T)+geom_boxplot()
#plot_grid(graph1,graph2,graph3,graph4,graph5)
#plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
#library(ggplot2)
#install.packages("cowplot")
require(cowplot)
#library(cowplot)
graph1 <- boxplot(Mammals_Milk[,1]~MMilk_km_3$cluster, xlab="graph1",varwidth=T)+geom_boxplot()
graph2 <- boxplot(Mammals_Milk[,2]~MMilk_km_3$cluster, xlab="graph2",varwidth=T)+geom_boxplot()
graph3 <- boxplot(Mammals_Milk[,3]~MMilk_km_3$cluster, xlab="graph3",varwidth=T)+geom_boxplot()
graph4 <- boxplot(Mammals_Milk[,4]~MMilk_km_3$cluster, xlab="graph4",varwidth=T)+geom_boxplot()
graph5 <- boxplot(Mammals_Milk[,5]~MMilk_km_3$cluster, xlab="graph5",varwidth=T)+geom_boxplot()
plot_grid(graph1,graph2,graph3,graph4,graph5)
#plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
#library(ggplot2)
#install.packages("cowplot")
require(cowplot)
library(cowplot)
graph1 <- boxplot(Mammals_Milk[,1]~MMilk_km_3$cluster, xlab="graph1",varwidth=T)+geom_boxplot()
graph2 <- boxplot(Mammals_Milk[,2]~MMilk_km_3$cluster, xlab="graph2",varwidth=T)+geom_boxplot()
graph3 <- boxplot(Mammals_Milk[,3]~MMilk_km_3$cluster, xlab="graph3",varwidth=T)+geom_boxplot()
graph4 <- boxplot(Mammals_Milk[,4]~MMilk_km_3$cluster, xlab="graph4",varwidth=T)+geom_boxplot()
graph5 <- boxplot(Mammals_Milk[,5]~MMilk_km_3$cluster, xlab="graph5",varwidth=T)+geom_boxplot()
plot_grid(graph1,graph2,graph3,graph4,graph5)
#plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
wgss<-rep(0,8)
for(i in 1:8){
wgss[i]<-kmeans(Mammals_Milk_Std[,6:10],centers=i,nstart=50)$tot.withinss
}
plot(c(1:8),wgss,type="b",pch=16,cex=1.3,ylim=c(0,100),xlab="Number of Groups",ylab="WGSS")
# The elbow of graph is at k=3.This fit the impression from dendrogram of Q2.
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(tidyverse)
Mammals_Milk<-read.csv("Milk_Composition.csv",header=T,row.names=1)
head(Mammals_Milk)
Mammals_Milk %>% summary()
Mammals_Milk_Std<-as.data.frame(round(scale(Mammals_Milk),2))
head(Mammals_Milk_Std)
resultMatrix <- apply(Mammals_Milk, 2, function(x) (x - mean(x)) / sd(x))
Mammals_Milk_Std<-cbind(Mammals_Milk_Std,resultMatrix) #rename
library(ggdendro)
dist_max <- dist(Mammals_Milk_Std[,6:10],method='euclidean')
ggdendrogram(hclust(dist_max),sub="",cex.lab=1.25,hang=-1,frame.plot=T)
set.seed(125)
#k3
MMilk_km_3 <- kmeans(Mammals_Milk_Std[,6:10],centers=3,nstart = 100)
Mammals_Milk$km_3<-MMilk_km_3$cluster
arrange(Mammals_Milk, .by_group = TRUE)
#df$assignment_k3 <- kmeansout_k4$cluster
#k4
MMilk_km_4<- kmeans(Mammals_Milk_Std[,6:10],centers=4,nstart = 100)
Mammals_Milk$km_4<-MMilk_km_4$cluster
arrange(Mammals_Milk, .by_group = TRUE)
#df$assignment_k4 <- kmeansout_k4$cluster
#k3
MMilk_Agg_K3<-Mammals_Milk %>% group_by(km_3) %>% summarize(count=n(),Mean_Water=mean(Water),Mean_Protein=mean(Protein),Mean_Fat=mean(Fat),Mean_Lactose=mean(Lactose),Mean_Ash=mean(Ash))
round(scale(MMilk_Agg_K3),2)
#k4
MMilk_Agg_K4<-Mammals_Milk %>% group_by(km_4) %>% summarize(count=n(),Mean_Water=mean(Water),Mean_Protein=mean(Protein),Mean_Fat=mean(Fat),Mean_Lactose=mean(Lactose),Mean_Ash=mean(Ash))
round(scale(MMilk_Agg_K4),2)
#Mammals_Milk_Std<-cbind(Mammals_Milk_Std,resultMatrix)
#library(ggplot2)
#install.packages("cowplot")
#require(cowplot)
#library(cowplot)
graph1 <- boxplot(Mammals_Milk[,1]~MMilk_km_3$cluster, xlab="graph1",varwidth=T)+geom_boxplot()
graph2 <- boxplot(Mammals_Milk[,2]~MMilk_km_3$cluster, xlab="graph2",varwidth=T)+geom_boxplot()
graph3 <- boxplot(Mammals_Milk[,3]~MMilk_km_3$cluster, xlab="graph3",varwidth=T)+geom_boxplot()
graph4 <- boxplot(Mammals_Milk[,4]~MMilk_km_3$cluster, xlab="graph4",varwidth=T)+geom_boxplot()
graph5 <- boxplot(Mammals_Milk[,5]~MMilk_km_3$cluster, xlab="graph5",varwidth=T)+geom_boxplot()
#plot_grid(graph1,graph2,graph3,graph4,graph5)
#plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
wgss<-rep(0,8)
for(i in 1:8){
wgss[i]<-kmeans(Mammals_Milk_Std[,6:10],centers=i,nstart=50)$tot.withinss
}
plot(c(1:8),wgss,type="b",pch=16,cex=1.3,ylim=c(0,100),xlab="Number of Groups",ylab="WGSS")
# The elbow of graph is at k=3.This fit the impression from dendrogram of Q2.
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.1
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
library(magrittr)
#> Warning: package 'magrittr' was built under R version 3.6.1
library(hchinamap)
china_map <- rgdal::readOGR(here::here("../Data/China.shp/bou2_4p.shp"))
get_map_china <- function(province='all') {
tryCatch(data("china", package='chinamap'))
china <- get("china", envir=.GlobalEnv)
## n <- sapply(china@polygons, function(x) nrow(x@Polygons[[1]]@coords))
## lcoords <- lapply(china@polygons, function(x) x@Polygons[[1]]@coords)
## coords <- do.call('rbind', lcoords)
## coords <- as.data.frame(coords)
## colnames(coords) <- c("long", "lat")
cn <- fortify(china)
## locations <- iconv(china$NAME, from='GBK')
locations = china$NAME
## coords$province <- rep(locations, times=n)
cn$province=locations[as.numeric(cn$id)+1]
if (province == 'all') {
res <- cn
} else {
idx <- grep(province, locations)
if (length(idx) == 0) {
stop("province not matched...")
}
res <- cn[cn$province %in% province,]
}
return(res)
}
##' extract map data of selected country from 'world' map
##'
##'
##' @title get_map_by_country
##' @param country selected country or countries
##' @return map data in data.frame
##' @export
##' @author ygc
get_map_by_country <- function(country) {
region = NULL
wdf <- map_data('world')
subset(wdf, region %in% country)
}
##' extract map data of selected region(s) from 'world' map
##'
##'
##' @title get_map_by_region
##' @param region selected region(s)
##' @return map data in data.frame
##' @importFrom ggplot2 map_data
##' @export
##' @author ygc
get_map_by_region <- function(region) {
wdf <- map_data('world')
wdf[wdf$subregion %in% region,]
}
packages = c('seriation', 'dendextend', 'heatmaply', 'tidyverse')
for(p in packages){library
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
wh <- read_csv("data/WHData-2018.csv")
china_map <- rgdal::readOGR(here::here("../Data/China.shp/bou2_4p.shp"))
install.packages("rgdal")
china_map <- rgdal::readOGR(here::here("../Data/China.shp/bou2_4p.shp"))
install.packages("here")
china_map <- rgdal::readOGR(here::here("../Data/China.shp/bou2_4p.shp"))
china_map <- rgdal::readOGR(here::here("C:\Users\Janet Cao\Data180-2_Fall22\data/bou2_4p.shp"))
china_map <- rgdal::readOGR(here::here("C:/Users/Janet Cao/Data180-2_Fall22/data/bou2_4p.shp"))
# extract province information from shap file
china_map_data = data.table::setDT(china_map@data)
data.table::setnames(china_map_data, "NAME", "province")
# transform to UTF-8 coding format
china_map_data[, province:=iconv(province, from = "GBK", to = "UTF-8")]
# create id to join province back to lat and long, id = 0 ~ 924
china_map_data[, id:= .I-1] # id = 0, 1, 2, ... , used to match to `dt_china`
# there are more shapes for one province due to small islands
china_map_data[, province:= as.factor(province)]
china_map_data <- china_map_data[!is.na(province)]
china_map_data <- china_map_data[AREA > 0.1]
head(china_map_data, 3)
dt_china = setDT(fortify(china_map))
library(data.table)
dt_china = setDT(fortify(china_map))
head(dt_china, 3)
# some value to plot (from years ago too)
value <- c(8893483, 12695396,  8470472,  7355291, 23193638,  9162183, 26383458,  3963604,  1945064, 19322432, 30794664, 10654162, 32222752, 13467663,  6902850, 25635291, 11847841, 20813492, 26404973, 20060115, 2451819, 17253385, 19029894,  7113833, 11971873, 689521, 10745630, 15334912, 10272559, 11084516, 1586635,  7026400, 13192935)
input_data <- data.table(province_CH, province_EN, value)
dt_china[, id:= as.numeric(id)]
setkey(china_map_data, id); setkey(dt_china, id)
dt_china <- china_map_data[dt_china]
# add the province EN, CH label file
province_CH <- china_map_data[, levels(province)] # the CH are in UTF-8 code
province_EN <- c("Shanghai", "Yunnan", "Inner Mongolia", "Beijing", "Taiwan",
"Jilin", "Sichuan", "Tianjin", "Ningxia", "Anhui",
"Shandong", "Shanxi", "Guangdong", "Guangxi", "Xinjiang",
"Jiangsu", "Jiangxi", "Hebei", "Henan", "Zhejiang",
"Hainan", "Hubei", "Hunan", "Gansu", "Fujian",
"Tibet", "Guizhou", "Liaoning", "Chongqing", "Shaanxi",
"Qinghai", "Hong Kong", "Heilongjiang"
)
# some value to plot (from years ago too)
value <- c(8893483, 12695396,  8470472,  7355291, 23193638,  9162183, 26383458,  3963604,  1945064, 19322432, 30794664, 10654162, 32222752, 13467663,  6902850, 25635291, 11847841, 20813492, 26404973, 20060115, 2451819, 17253385, 19029894,  7113833, 11971873, 689521, 10745630, 15334912, 10272559, 11084516, 1586635,  7026400, 13192935)
input_data <- data.table(province_CH, province_EN, value)
setkey(input_data, province_CH)
setkey(dt_china, province)
dt_china <- input_data[dt_china, nomatch = 0]
# saveRDS(dt_china, file = "D:/liuyanguu/Blogdown/Data/dt_china.rds")
# create label file of province `label_dt`
centroids_cn <- get.centroids(data = dt_china, by_var = "province_CH")
china_map <- rgdal::readOGR(here::here("C:/Users/Janet Cao/Data180-2_Fall22/data/bou2_4p.shp"))
View(china_map)
knitr::opts_chunk$set(echo = TRUE)
# From CRAN
install.packages('hchinamap', build_vignettes = TRUE)
# From  GitHub
devtools::install_github('czxa/hchinamap', build_vignettes = TRUE)
# From CRAN
install.packages('hchinamap', build_vignettes = TRUE)
file<-read.csv("C:\Users\Janet Cao\OneDrive - Dickinson College\Year3(2)\research\Original Data\Importable_data\mapdata.csv")
file<-read.csv("C:/Users/Janet Cao/OneDrive - Dickinson College/Year3(2)/research/Original Data/Importable_data/mapdata.csv")
View(file)
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.1
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
library(magrittr)
#> Warning: package 'magrittr' was built under R version 3.6.1
library(hchinamap)
china <- chinadf %>%
dplyr::filter(region == "China")
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.1
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
library(magrittr)
#> Warning: package 'magrittr' was built under R version 3.6.1
library(hchinamap)
china <- file %>%
dplyr::filter(region == "China")
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.1
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
library(magrittr)
#> Warning: package 'magrittr' was built under R version 3.6.1
library(hchinamap)
china <- file %>%
hchinamap(name = file$city1, value = file$date2,
width = "100%", height = "400px",
title = "Map of China", region = "China")
View(china)
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.1
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
library(magrittr)
#> Warning: package 'magrittr' was built under R version 3.6.1
library(hchinamap)
hchinamap(name = file$city1, value = file$date2,
width = "100%", height = "400px",
title = "Map of China", region = "China")
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.1
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
library(magrittr)
#> Warning: package 'magrittr' was built under R version 3.6.1
library(hchinamap)
anhui <- file[26:28,]
hchinamap(name = anhui$city1, value = anhui$date2,
width = "100%", height = "400px",
title = "Map of China", region = "China")
china <- hchinamap::chinadf %>%
dplyr::filter(region == "中国")
file<-read.csv("C:/Users/Janet Cao/OneDrive - Dickinson College/Year3(2)/research/Original Data/Importable_data/mapdata.csv")
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.1
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
library(magrittr)
#> Warning: package 'magrittr' was built under R version 3.6.1
library(hchinamap)
anhui <- file[26:28,]
hchinamap(name = file$province_CHN, value = file$elapsed_time,
width = "100%", height = "400px",
title = "Map of China", region = "China")
$ git clone https://github.com/mathjax/MathJax.git
git clone https://github.com/mathjax/MathJax.git
# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
)
library(tidyverse)
library(tm)
news<-read.csv("news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
df.head(poswords)
head(new)
head(news)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
knitr::opts_chunk$set(echo = TRUE)
file<-read.csv("C:/Users/Janet Cao/OneDrive - Dickinson College/Year3(2)/research/Original Data/Importable_data/mapdata.csv")
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.1
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
library(magrittr)
#> Warning: package 'magrittr' was built under R version 3.6.1
library(hchinamap)
anhui <- file[26:28,]
hchinamap(name = file$province_CHN, value = file$elapsed_time,
width = "100%", height = "400px",
title = "Map of China", region = "China")
head(news)
library(tidyverse)
library(tm)
news<-read.csv("news.csv",header=T)
library(tidyverse)
library(tm)
news<-read.csv("C:/Users/Janet Cao/Data180-2_Fall22/hw7/news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
```{r}
```{r}
knitr::opts_chunk$set(echo = TRUE)
totalWords <- sum(wordCounts)
head(news)
news %>% count(year)
getwd()
setwd("C:/Users/Janet Cao/Data180-2_Fall22/hw7")
library(tidyverse)
library(tm)
news<-read.csv("news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
negWords <- scan("negative-words.txt", character(0), sep = "\n")  # 4783 items
head(posWords,15)
head(negWords,15)
head(news)
news %>% count(year)
#so there are 19 years
charVector<-as.vector(news['headline_text'])
head(charVector)
wordVector<-VectorSource(charVector)
wordCorpus<-Corpus(wordVector)
# first step transformation: make all of the letters in "wordCorpus" lowercase
wordCorpus <- tm_map(wordCorpus, content_transformer(tolower))
# second step transformation: remove the punctuation in "wordCorpus"
wordCorpus <- tm_map(wordCorpus, removePunctuation)
# third step transformation: remove numbers in "wordCorpus"
wordCorpus <- tm_map(wordCorpus, removeNumbers)
# final step transformation: take out the "stop" words, such as "the", "a" and "at"
wordCorpus <- tm_map(wordCorpus, removeWords, stopwords("english"))
wordCorpus[["1"]][["content"]]
#a term document matrix is a matrix that describes the frequency of terms that occur in a collection of documents.
tdm <- TermDocumentMatrix(wordCorpus)
tdm
m <- as.matrix(tdm)#
wordCounts <- rowSums(m)
wordCounts <- sort(wordCounts, decreasing=TRUE)
head(wordCounts,10)
#colnames(m)[1] <- "wordCounts"
#m2<-m[order(m[,1],decreasing=TRUE),]
#head(m2,10)
barplot(wordCounts[wordCounts>50],las = 2,cex.names = 0.75)
#par(mar = c(1, 1, 1, 1))
#barplot(table(wordCounts>=50),las = 2,cex.names = 0.75)
#make x label vertical: lab=2; horizontal: lab=1
totalWords <- sum(wordCounts)
#positive
matchedP <- match(names(wordCounts), posWords, nomatch = 0)
matchedP <- matchedP != 0 # Make a Boolean map
matchedP <- wordCounts[matchedP] # Apply Boolean map
barplot(matchedP>=20,las=2,cex.names=0.75) # Small vertical labels
sum(matchedP)/totalWords # Proportion of positive words vs total:3.734%
#negative:
matchedPn <- match(names(wordCounts), negWords, nomatch = 0)
matchedPn <- matchedPn != 0 # Make a Boolean map
matchedPn <- wordCounts[matchedPn] # Apply Boolean map
barplot(matchedPn,las=2,cex.names=0.75) # Small vertical labels
sum(matchedPn)/totalWords # Proportion of negative words vs total:7.77%
news <- news %>% group_by(year,month) %>% mutate(count=n(), yearmonth = paste(year, month,sep = '/')) %>% arrange(year,month,day)
news
ggplot(news, aes(x=factor(yearmonth,levels = yearmonth), y=count)) +
geom_bar() +theme(axis.text=element_text(size=4,angle=90))
library("quanteda")
library('corpus')
term_stats(charVector, ngrams = 1) # get term stats, for single word. Can change ngrams.
term_stats(charVector, ngrams = 1,filter = text_filter(drop_punct = TRUE, drop_symbol = TRUE, drop = stopwords_en))
term_stats(charVector, ngrams = 2) # get term stats, for single word. Can change ngrams.
term_stats(charVector, ngrams = 2,filter = text_filter(drop_punct = TRUE, drop_symbol = TRUE, drop = stopwords_en))
news
wordVector<-VectorSource(charVector)
wordCorpus<-Corpus(wordVector)
paras <- corpus_reshape(newscorpus, to="paragraphs")
news
wordVector<-VectorSource(charVector)
newscorpus<-Corpus(wordVector)
paras <- corpus_reshape(newscorpus, to="paragraphs")
news_dtm <- dfm(paras, stem=TRUE, remove_punct=TRUE, remove_symbols = TRUE, remove_numbers = TRUE, remove=c(stopwords("english")))
news
wordVector<-VectorSource(charVector)
wordCorpus<-Corpus(wordVector)
paras <- corpus_reshape(newscorpus, to="paragraphs")
news
wordVector<-VectorSource(charVector)
wordCorpus<-Corpus(wordVector)
paras <- corpus_reshape(wordCorpus, to="paragraphs")
wordVector<-VectorSource(charVector)
wordCorpus<-Corpus(wordVector)
wordVector<-VectorSource(charVector)
wordCorpus<-Corpus(wordVector)
wordVector<-VectorSource(charVector)
wordCorpus<-Corpus(wordVector)
paras <- corpus_reshape(wordCorpus, to="paragraphs")
library(tm)
# Read in anthems
anthems <- read.csv('https://raw.githubusercontent.com/lucas-de-sa/national-anthems-clustering/master/datasets/anthems.csv')
charVector <- anthems$Anthem
head(charVector)
charVector<-as.vector(news['headline_text'])
head(charVector,6)
View(anthems)
View(news)
newscorpus <- corpus(charVector, docnames=news$publish_date)
newscorpus <- corpus(charVector, docnames=news$yearmonth)
newscorpus <- corpus(charVector, docnames=news$management)
newscorpus <- corpus(charVector)
wordVector<-VectorSource(charVector)
newscorpus <- corpus(wordVector)
newscorpus <- corpus(wordVector)
wordVector<-VectorSource(charVector)
newscorpus<-Corpus(wordVector)
paras <- corpus_reshape(newscorpus, to="paragraphs")
